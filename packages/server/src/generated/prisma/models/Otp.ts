
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Otp` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Otp
 * 
 */
export type OtpModel = runtime.Types.Result.DefaultSelection<Prisma.$OtpPayload>

export type AggregateOtp = {
  _count: OtpCountAggregateOutputType | null
  _min: OtpMinAggregateOutputType | null
  _max: OtpMaxAggregateOutputType | null
}

export type OtpMinAggregateOutputType = {
  id: string | null
  userId: string | null
  code: string | null
  purpose: $Enums.OtpPurpose | null
  mailId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OtpMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  code: string | null
  purpose: $Enums.OtpPurpose | null
  mailId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type OtpCountAggregateOutputType = {
  id: number
  userId: number
  code: number
  purpose: number
  mailId: number
  expiresAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type OtpMinAggregateInputType = {
  id?: true
  userId?: true
  code?: true
  purpose?: true
  mailId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type OtpMaxAggregateInputType = {
  id?: true
  userId?: true
  code?: true
  purpose?: true
  mailId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type OtpCountAggregateInputType = {
  id?: true
  userId?: true
  code?: true
  purpose?: true
  mailId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type OtpAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Otp to aggregate.
   */
  where?: Prisma.OtpWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Otps to fetch.
   */
  orderBy?: Prisma.OtpOrderByWithRelationInput | Prisma.OtpOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OtpWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Otps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Otps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Otps
  **/
  _count?: true | OtpCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OtpMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OtpMaxAggregateInputType
}

export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
      [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOtp[P]>
    : Prisma.GetScalarType<T[P], AggregateOtp[P]>
}




export type OtpGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OtpWhereInput
  orderBy?: Prisma.OtpOrderByWithAggregationInput | Prisma.OtpOrderByWithAggregationInput[]
  by: Prisma.OtpScalarFieldEnum[] | Prisma.OtpScalarFieldEnum
  having?: Prisma.OtpScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OtpCountAggregateInputType | true
  _min?: OtpMinAggregateInputType
  _max?: OtpMaxAggregateInputType
}

export type OtpGroupByOutputType = {
  id: string
  userId: string
  code: string
  purpose: $Enums.OtpPurpose
  mailId: string | null
  expiresAt: Date
  createdAt: Date
  updatedAt: Date
  _count: OtpCountAggregateOutputType | null
  _min: OtpMinAggregateOutputType | null
  _max: OtpMaxAggregateOutputType | null
}

type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OtpGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OtpGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OtpGroupByOutputType[P]>
      }
    >
  > 



export type OtpWhereInput = {
  AND?: Prisma.OtpWhereInput | Prisma.OtpWhereInput[]
  OR?: Prisma.OtpWhereInput[]
  NOT?: Prisma.OtpWhereInput | Prisma.OtpWhereInput[]
  id?: Prisma.StringFilter<"Otp"> | string
  userId?: Prisma.StringFilter<"Otp"> | string
  code?: Prisma.StringFilter<"Otp"> | string
  purpose?: Prisma.EnumOtpPurposeFilter<"Otp"> | $Enums.OtpPurpose
  mailId?: Prisma.StringNullableFilter<"Otp"> | string | null
  expiresAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type OtpOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  code?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  mailId?: Prisma.SortOrderInput | Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type OtpWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  code?: string
  AND?: Prisma.OtpWhereInput | Prisma.OtpWhereInput[]
  OR?: Prisma.OtpWhereInput[]
  NOT?: Prisma.OtpWhereInput | Prisma.OtpWhereInput[]
  userId?: Prisma.StringFilter<"Otp"> | string
  purpose?: Prisma.EnumOtpPurposeFilter<"Otp"> | $Enums.OtpPurpose
  mailId?: Prisma.StringNullableFilter<"Otp"> | string | null
  expiresAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "code">

export type OtpOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  code?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  mailId?: Prisma.SortOrderInput | Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.OtpCountOrderByAggregateInput
  _max?: Prisma.OtpMaxOrderByAggregateInput
  _min?: Prisma.OtpMinOrderByAggregateInput
}

export type OtpScalarWhereWithAggregatesInput = {
  AND?: Prisma.OtpScalarWhereWithAggregatesInput | Prisma.OtpScalarWhereWithAggregatesInput[]
  OR?: Prisma.OtpScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OtpScalarWhereWithAggregatesInput | Prisma.OtpScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Otp"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Otp"> | string
  code?: Prisma.StringWithAggregatesFilter<"Otp"> | string
  purpose?: Prisma.EnumOtpPurposeWithAggregatesFilter<"Otp"> | $Enums.OtpPurpose
  mailId?: Prisma.StringNullableWithAggregatesFilter<"Otp"> | string | null
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"Otp"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Otp"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Otp"> | Date | string
}

export type OtpCreateInput = {
  id?: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutOtpsInput
}

export type OtpUncheckedCreateInput = {
  id?: string
  userId: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OtpUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutOtpsNestedInput
}

export type OtpUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OtpCreateManyInput = {
  id?: string
  userId: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OtpUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OtpUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OtpCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  code?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  mailId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OtpMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  code?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  mailId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OtpMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  code?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  mailId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type OtpListRelationFilter = {
  every?: Prisma.OtpWhereInput
  some?: Prisma.OtpWhereInput
  none?: Prisma.OtpWhereInput
}

export type OtpOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumOtpPurposeFieldUpdateOperationsInput = {
  set?: $Enums.OtpPurpose
}

export type OtpCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput> | Prisma.OtpCreateWithoutUserInput[] | Prisma.OtpUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OtpCreateOrConnectWithoutUserInput | Prisma.OtpCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.OtpCreateManyUserInputEnvelope
  connect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
}

export type OtpUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput> | Prisma.OtpCreateWithoutUserInput[] | Prisma.OtpUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OtpCreateOrConnectWithoutUserInput | Prisma.OtpCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.OtpCreateManyUserInputEnvelope
  connect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
}

export type OtpUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput> | Prisma.OtpCreateWithoutUserInput[] | Prisma.OtpUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OtpCreateOrConnectWithoutUserInput | Prisma.OtpCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.OtpUpsertWithWhereUniqueWithoutUserInput | Prisma.OtpUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.OtpCreateManyUserInputEnvelope
  set?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  disconnect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  delete?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  connect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  update?: Prisma.OtpUpdateWithWhereUniqueWithoutUserInput | Prisma.OtpUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.OtpUpdateManyWithWhereWithoutUserInput | Prisma.OtpUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.OtpScalarWhereInput | Prisma.OtpScalarWhereInput[]
}

export type OtpUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput> | Prisma.OtpCreateWithoutUserInput[] | Prisma.OtpUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.OtpCreateOrConnectWithoutUserInput | Prisma.OtpCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.OtpUpsertWithWhereUniqueWithoutUserInput | Prisma.OtpUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.OtpCreateManyUserInputEnvelope
  set?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  disconnect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  delete?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  connect?: Prisma.OtpWhereUniqueInput | Prisma.OtpWhereUniqueInput[]
  update?: Prisma.OtpUpdateWithWhereUniqueWithoutUserInput | Prisma.OtpUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.OtpUpdateManyWithWhereWithoutUserInput | Prisma.OtpUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.OtpScalarWhereInput | Prisma.OtpScalarWhereInput[]
}

export type OtpCreateWithoutUserInput = {
  id?: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OtpUncheckedCreateWithoutUserInput = {
  id?: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OtpCreateOrConnectWithoutUserInput = {
  where: Prisma.OtpWhereUniqueInput
  create: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput>
}

export type OtpCreateManyUserInputEnvelope = {
  data: Prisma.OtpCreateManyUserInput | Prisma.OtpCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type OtpUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.OtpWhereUniqueInput
  update: Prisma.XOR<Prisma.OtpUpdateWithoutUserInput, Prisma.OtpUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.OtpCreateWithoutUserInput, Prisma.OtpUncheckedCreateWithoutUserInput>
}

export type OtpUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.OtpWhereUniqueInput
  data: Prisma.XOR<Prisma.OtpUpdateWithoutUserInput, Prisma.OtpUncheckedUpdateWithoutUserInput>
}

export type OtpUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.OtpScalarWhereInput
  data: Prisma.XOR<Prisma.OtpUpdateManyMutationInput, Prisma.OtpUncheckedUpdateManyWithoutUserInput>
}

export type OtpScalarWhereInput = {
  AND?: Prisma.OtpScalarWhereInput | Prisma.OtpScalarWhereInput[]
  OR?: Prisma.OtpScalarWhereInput[]
  NOT?: Prisma.OtpScalarWhereInput | Prisma.OtpScalarWhereInput[]
  id?: Prisma.StringFilter<"Otp"> | string
  userId?: Prisma.StringFilter<"Otp"> | string
  code?: Prisma.StringFilter<"Otp"> | string
  purpose?: Prisma.EnumOtpPurposeFilter<"Otp"> | $Enums.OtpPurpose
  mailId?: Prisma.StringNullableFilter<"Otp"> | string | null
  expiresAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Otp"> | Date | string
}

export type OtpCreateManyUserInput = {
  id?: string
  code: string
  purpose?: $Enums.OtpPurpose
  mailId?: string | null
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type OtpUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OtpUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OtpUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.EnumOtpPurposeFieldUpdateOperationsInput | $Enums.OtpPurpose
  mailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type OtpSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  code?: boolean
  purpose?: boolean
  mailId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["otp"]>

export type OtpSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  code?: boolean
  purpose?: boolean
  mailId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["otp"]>

export type OtpSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  code?: boolean
  purpose?: boolean
  mailId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["otp"]>

export type OtpSelectScalar = {
  id?: boolean
  userId?: boolean
  code?: boolean
  purpose?: boolean
  mailId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type OtpOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "code" | "purpose" | "mailId" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["otp"]>
export type OtpInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type OtpIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type OtpIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $OtpPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Otp"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    code: string
    purpose: $Enums.OtpPurpose
    mailId: string | null
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["otp"]>
  composites: {}
}

export type OtpGetPayload<S extends boolean | null | undefined | OtpDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OtpPayload, S>

export type OtpCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OtpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OtpCountAggregateInputType | true
  }

export interface OtpDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Otp'], meta: { name: 'Otp' } }
  /**
   * Find zero or one Otp that matches the filter.
   * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
   * @example
   * // Get one Otp
   * const otp = await prisma.otp.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OtpFindUniqueArgs>(args: Prisma.SelectSubset<T, OtpFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Otp that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
   * @example
   * // Get one Otp
   * const otp = await prisma.otp.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Otp that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpFindFirstArgs} args - Arguments to find a Otp
   * @example
   * // Get one Otp
   * const otp = await prisma.otp.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OtpFindFirstArgs>(args?: Prisma.SelectSubset<T, OtpFindFirstArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Otp that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
   * @example
   * // Get one Otp
   * const otp = await prisma.otp.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OtpFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Otps that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Otps
   * const otps = await prisma.otp.findMany()
   * 
   * // Get first 10 Otps
   * const otps = await prisma.otp.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const otpWithIdOnly = await prisma.otp.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OtpFindManyArgs>(args?: Prisma.SelectSubset<T, OtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Otp.
   * @param {OtpCreateArgs} args - Arguments to create a Otp.
   * @example
   * // Create one Otp
   * const Otp = await prisma.otp.create({
   *   data: {
   *     // ... data to create a Otp
   *   }
   * })
   * 
   */
  create<T extends OtpCreateArgs>(args: Prisma.SelectSubset<T, OtpCreateArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Otps.
   * @param {OtpCreateManyArgs} args - Arguments to create many Otps.
   * @example
   * // Create many Otps
   * const otp = await prisma.otp.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OtpCreateManyArgs>(args?: Prisma.SelectSubset<T, OtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Otps and returns the data saved in the database.
   * @param {OtpCreateManyAndReturnArgs} args - Arguments to create many Otps.
   * @example
   * // Create many Otps
   * const otp = await prisma.otp.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Otps and only return the `id`
   * const otpWithIdOnly = await prisma.otp.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OtpCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OtpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Otp.
   * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
   * @example
   * // Delete one Otp
   * const Otp = await prisma.otp.delete({
   *   where: {
   *     // ... filter to delete one Otp
   *   }
   * })
   * 
   */
  delete<T extends OtpDeleteArgs>(args: Prisma.SelectSubset<T, OtpDeleteArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Otp.
   * @param {OtpUpdateArgs} args - Arguments to update one Otp.
   * @example
   * // Update one Otp
   * const otp = await prisma.otp.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OtpUpdateArgs>(args: Prisma.SelectSubset<T, OtpUpdateArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Otps.
   * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
   * @example
   * // Delete a few Otps
   * const { count } = await prisma.otp.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OtpDeleteManyArgs>(args?: Prisma.SelectSubset<T, OtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Otps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Otps
   * const otp = await prisma.otp.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OtpUpdateManyArgs>(args: Prisma.SelectSubset<T, OtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Otps and returns the data updated in the database.
   * @param {OtpUpdateManyAndReturnArgs} args - Arguments to update many Otps.
   * @example
   * // Update many Otps
   * const otp = await prisma.otp.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Otps and only return the `id`
   * const otpWithIdOnly = await prisma.otp.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OtpUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OtpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Otp.
   * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
   * @example
   * // Update or create a Otp
   * const otp = await prisma.otp.upsert({
   *   create: {
   *     // ... data to create a Otp
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Otp we want to update
   *   }
   * })
   */
  upsert<T extends OtpUpsertArgs>(args: Prisma.SelectSubset<T, OtpUpsertArgs<ExtArgs>>): Prisma.Prisma__OtpClient<runtime.Types.Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Otps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpCountArgs} args - Arguments to filter Otps to count.
   * @example
   * // Count the number of Otps
   * const count = await prisma.otp.count({
   *   where: {
   *     // ... the filter for the Otps we want to count
   *   }
   * })
  **/
  count<T extends OtpCountArgs>(
    args?: Prisma.Subset<T, OtpCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OtpCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Otp.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OtpAggregateArgs>(args: Prisma.Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

  /**
   * Group by Otp.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OtpGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OtpGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OtpGroupByArgs['orderBy'] }
      : { orderBy?: OtpGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Otp model
 */
readonly fields: OtpFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Otp.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OtpClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Otp model
 */
export interface OtpFieldRefs {
  readonly id: Prisma.FieldRef<"Otp", 'String'>
  readonly userId: Prisma.FieldRef<"Otp", 'String'>
  readonly code: Prisma.FieldRef<"Otp", 'String'>
  readonly purpose: Prisma.FieldRef<"Otp", 'OtpPurpose'>
  readonly mailId: Prisma.FieldRef<"Otp", 'String'>
  readonly expiresAt: Prisma.FieldRef<"Otp", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Otp", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Otp", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Otp findUnique
 */
export type OtpFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter, which Otp to fetch.
   */
  where: Prisma.OtpWhereUniqueInput
}

/**
 * Otp findUniqueOrThrow
 */
export type OtpFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter, which Otp to fetch.
   */
  where: Prisma.OtpWhereUniqueInput
}

/**
 * Otp findFirst
 */
export type OtpFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter, which Otp to fetch.
   */
  where?: Prisma.OtpWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Otps to fetch.
   */
  orderBy?: Prisma.OtpOrderByWithRelationInput | Prisma.OtpOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Otps.
   */
  cursor?: Prisma.OtpWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Otps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Otps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Otps.
   */
  distinct?: Prisma.OtpScalarFieldEnum | Prisma.OtpScalarFieldEnum[]
}

/**
 * Otp findFirstOrThrow
 */
export type OtpFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter, which Otp to fetch.
   */
  where?: Prisma.OtpWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Otps to fetch.
   */
  orderBy?: Prisma.OtpOrderByWithRelationInput | Prisma.OtpOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Otps.
   */
  cursor?: Prisma.OtpWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Otps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Otps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Otps.
   */
  distinct?: Prisma.OtpScalarFieldEnum | Prisma.OtpScalarFieldEnum[]
}

/**
 * Otp findMany
 */
export type OtpFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter, which Otps to fetch.
   */
  where?: Prisma.OtpWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Otps to fetch.
   */
  orderBy?: Prisma.OtpOrderByWithRelationInput | Prisma.OtpOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Otps.
   */
  cursor?: Prisma.OtpWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Otps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Otps.
   */
  skip?: number
  distinct?: Prisma.OtpScalarFieldEnum | Prisma.OtpScalarFieldEnum[]
}

/**
 * Otp create
 */
export type OtpCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * The data needed to create a Otp.
   */
  data: Prisma.XOR<Prisma.OtpCreateInput, Prisma.OtpUncheckedCreateInput>
}

/**
 * Otp createMany
 */
export type OtpCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Otps.
   */
  data: Prisma.OtpCreateManyInput | Prisma.OtpCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Otp createManyAndReturn
 */
export type OtpCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * The data used to create many Otps.
   */
  data: Prisma.OtpCreateManyInput | Prisma.OtpCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Otp update
 */
export type OtpUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * The data needed to update a Otp.
   */
  data: Prisma.XOR<Prisma.OtpUpdateInput, Prisma.OtpUncheckedUpdateInput>
  /**
   * Choose, which Otp to update.
   */
  where: Prisma.OtpWhereUniqueInput
}

/**
 * Otp updateMany
 */
export type OtpUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Otps.
   */
  data: Prisma.XOR<Prisma.OtpUpdateManyMutationInput, Prisma.OtpUncheckedUpdateManyInput>
  /**
   * Filter which Otps to update
   */
  where?: Prisma.OtpWhereInput
  /**
   * Limit how many Otps to update.
   */
  limit?: number
}

/**
 * Otp updateManyAndReturn
 */
export type OtpUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * The data used to update Otps.
   */
  data: Prisma.XOR<Prisma.OtpUpdateManyMutationInput, Prisma.OtpUncheckedUpdateManyInput>
  /**
   * Filter which Otps to update
   */
  where?: Prisma.OtpWhereInput
  /**
   * Limit how many Otps to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Otp upsert
 */
export type OtpUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * The filter to search for the Otp to update in case it exists.
   */
  where: Prisma.OtpWhereUniqueInput
  /**
   * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
   */
  create: Prisma.XOR<Prisma.OtpCreateInput, Prisma.OtpUncheckedCreateInput>
  /**
   * In case the Otp was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OtpUpdateInput, Prisma.OtpUncheckedUpdateInput>
}

/**
 * Otp delete
 */
export type OtpDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
  /**
   * Filter which Otp to delete.
   */
  where: Prisma.OtpWhereUniqueInput
}

/**
 * Otp deleteMany
 */
export type OtpDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Otps to delete
   */
  where?: Prisma.OtpWhereInput
  /**
   * Limit how many Otps to delete.
   */
  limit?: number
}

/**
 * Otp without action
 */
export type OtpDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Otp
   */
  select?: Prisma.OtpSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Otp
   */
  omit?: Prisma.OtpOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OtpInclude<ExtArgs> | null
}
